<?php
/**
 * Output
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Shotstack\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shotstack
 *
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Shotstack\Client\Model;

use \ArrayAccess;
use \Shotstack\Client\ObjectSerializer;

/**
 * Output Class Doc Comment
 *
 * @category Class
 * @description The output format, render range and type of media to generate.
 * @package  Shotstack\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Output implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Output';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'format' => 'string',
        'resolution' => 'string',
        'aspect_ratio' => 'string',
        'size' => '\Shotstack\Client\Model\Size',
        'fps' => 'float',
        'scale_to' => 'string',
        'quality' => 'string',
        'repeat' => 'bool',
        'range' => '\Shotstack\Client\Model\Range',
        'poster' => '\Shotstack\Client\Model\Poster',
        'thumbnail' => '\Shotstack\Client\Model\Thumbnail',
        'destinations' => '\Shotstack\Client\Model\Destinations'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'format' => null,
        'resolution' => null,
        'aspect_ratio' => null,
        'size' => null,
        'fps' => null,
        'scale_to' => null,
        'quality' => null,
        'repeat' => null,
        'range' => null,
        'poster' => null,
        'thumbnail' => null,
        'destinations' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'format' => 'format',
        'resolution' => 'resolution',
        'aspect_ratio' => 'aspectRatio',
        'size' => 'size',
        'fps' => 'fps',
        'scale_to' => 'scaleTo',
        'quality' => 'quality',
        'repeat' => 'repeat',
        'range' => 'range',
        'poster' => 'poster',
        'thumbnail' => 'thumbnail',
        'destinations' => 'destinations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'format' => 'setFormat',
        'resolution' => 'setResolution',
        'aspect_ratio' => 'setAspectRatio',
        'size' => 'setSize',
        'fps' => 'setFps',
        'scale_to' => 'setScaleTo',
        'quality' => 'setQuality',
        'repeat' => 'setRepeat',
        'range' => 'setRange',
        'poster' => 'setPoster',
        'thumbnail' => 'setThumbnail',
        'destinations' => 'setDestinations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'format' => 'getFormat',
        'resolution' => 'getResolution',
        'aspect_ratio' => 'getAspectRatio',
        'size' => 'getSize',
        'fps' => 'getFps',
        'scale_to' => 'getScaleTo',
        'quality' => 'getQuality',
        'repeat' => 'getRepeat',
        'range' => 'getRange',
        'poster' => 'getPoster',
        'thumbnail' => 'getThumbnail',
        'destinations' => 'getDestinations'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const FORMAT_MP4 = 'mp4';
    const FORMAT_GIF = 'gif';
    const FORMAT_MP3 = 'mp3';
    const FORMAT_JPG = 'jpg';
    const FORMAT_PNG = 'png';
    const FORMAT_BMP = 'bmp';
    const RESOLUTION_PREVIEW = 'preview';
    const RESOLUTION_MOBILE = 'mobile';
    const RESOLUTION_SD = 'sd';
    const RESOLUTION_HD = 'hd';
    const RESOLUTION__1080 = '1080';
    const ASPECT_RATIO__169 = '16:9';
    const ASPECT_RATIO__916 = '9:16';
    const ASPECT_RATIO__11 = '1:1';
    const ASPECT_RATIO__45 = '4:5';
    const ASPECT_RATIO__43 = '4:3';
    const FPS_12 = 12;
    const FPS_15 = 15;
    const FPS_23_DOT_976 = 23.976;
    const FPS_24 = 24;
    const FPS_25 = 25;
    const FPS_29_DOT_97 = 29.97;
    const FPS_30 = 30;
    const SCALE_TO_PREVIEW = 'preview';
    const SCALE_TO_MOBILE = 'mobile';
    const SCALE_TO_SD = 'sd';
    const SCALE_TO_HD = 'hd';
    const SCALE_TO__1080 = '1080';
    const QUALITY_LOW = 'low';
    const QUALITY_MEDIUM = 'medium';
    const QUALITY_HIGH = 'high';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFormatAllowableValues()
    {
        return [
            self::FORMAT_MP4,
            self::FORMAT_GIF,
            self::FORMAT_MP3,
            self::FORMAT_JPG,
            self::FORMAT_PNG,
            self::FORMAT_BMP,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResolutionAllowableValues()
    {
        return [
            self::RESOLUTION_PREVIEW,
            self::RESOLUTION_MOBILE,
            self::RESOLUTION_SD,
            self::RESOLUTION_HD,
            self::RESOLUTION__1080,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAspectRatioAllowableValues()
    {
        return [
            self::ASPECT_RATIO__169,
            self::ASPECT_RATIO__916,
            self::ASPECT_RATIO__11,
            self::ASPECT_RATIO__45,
            self::ASPECT_RATIO__43,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFpsAllowableValues()
    {
        return [
            self::FPS_12,
            self::FPS_15,
            self::FPS_23_DOT_976,
            self::FPS_24,
            self::FPS_25,
            self::FPS_29_DOT_97,
            self::FPS_30,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScaleToAllowableValues()
    {
        return [
            self::SCALE_TO_PREVIEW,
            self::SCALE_TO_MOBILE,
            self::SCALE_TO_SD,
            self::SCALE_TO_HD,
            self::SCALE_TO__1080,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getQualityAllowableValues()
    {
        return [
            self::QUALITY_LOW,
            self::QUALITY_MEDIUM,
            self::QUALITY_HIGH,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['format'] = $data['format'] ?? null;
        $this->container['resolution'] = $data['resolution'] ?? null;
        $this->container['aspect_ratio'] = $data['aspect_ratio'] ?? null;
        $this->container['size'] = $data['size'] ?? null;
        $this->container['fps'] = $data['fps'] ?? self::FPS_25;
        $this->container['scale_to'] = $data['scale_to'] ?? null;
        $this->container['quality'] = $data['quality'] ?? 'medium';
        $this->container['repeat'] = $data['repeat'] ?? true;
        $this->container['range'] = $data['range'] ?? null;
        $this->container['poster'] = $data['poster'] ?? null;
        $this->container['thumbnail'] = $data['thumbnail'] ?? null;
        $this->container['destinations'] = $data['destinations'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['format'] === null) {
            $invalidProperties[] = "'format' can't be null";
        }
        $allowedValues = $this->getFormatAllowableValues();
        if (!is_null($this->container['format']) && !in_array($this->container['format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'format', must be one of '%s'",
                $this->container['format'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getResolutionAllowableValues();
        if (!is_null($this->container['resolution']) && !in_array($this->container['resolution'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'resolution', must be one of '%s'",
                $this->container['resolution'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAspectRatioAllowableValues();
        if (!is_null($this->container['aspect_ratio']) && !in_array($this->container['aspect_ratio'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'aspect_ratio', must be one of '%s'",
                $this->container['aspect_ratio'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFpsAllowableValues();
        if (!is_null($this->container['fps']) && !in_array($this->container['fps'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fps', must be one of '%s'",
                $this->container['fps'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getScaleToAllowableValues();
        if (!is_null($this->container['scale_to']) && !in_array($this->container['scale_to'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'scale_to', must be one of '%s'",
                $this->container['scale_to'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getQualityAllowableValues();
        if (!is_null($this->container['quality']) && !in_array($this->container['quality'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'quality', must be one of '%s'",
                $this->container['quality'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets format
     *
     * @return string
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param string $format The output format and type of media file to generate. <ul>   <li>`mp4` - mp4 video file</li>   <li>`gif` - animated gif</li>   <li>`jpg` - jpg image file</li>   <li>`png` - png image file</li>   <li>`bmp` - bmp image file</li>   <li>`mp3` - mp3 audio file (audio only)</li> </ul>
     *
     * @return self
     */
    public function setFormat($format)
    {
        $allowedValues = $this->getFormatAllowableValues();
        if (!in_array($format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'format', must be one of '%s'",
                    $format,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets resolution
     *
     * @return string|null
     */
    public function getResolution()
    {
        return $this->container['resolution'];
    }

    /**
     * Sets resolution
     *
     * @param string|null $resolution The output resolution of the video or image. <ul>   <li>`preview` - 512px x 288px @ 15fps</li>   <li>`mobile` - 640px x 360px @ 25fps</li>   <li>`sd` - 1024px x 576px @ 25fps</li>   <li>`hd` - 1280px x 720px @ 25fps</li>   <li>`1080` - 1920px x 1080px @ 25fps</li> </ul>
     *
     * @return self
     */
    public function setResolution($resolution)
    {
        $allowedValues = $this->getResolutionAllowableValues();
        if (!is_null($resolution) && !in_array($resolution, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'resolution', must be one of '%s'",
                    $resolution,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['resolution'] = $resolution;

        return $this;
    }

    /**
     * Gets aspect_ratio
     *
     * @return string|null
     */
    public function getAspectRatio()
    {
        return $this->container['aspect_ratio'];
    }

    /**
     * Sets aspect_ratio
     *
     * @param string|null $aspect_ratio The aspect ratio (shape) of the video or image. Useful for social media output formats. Options are: <ul>   <li>`16:9` - regular landscape/horizontal aspect ratio (default)</li>   <li>`9:16` - vertical/portrait aspect ratio</li>   <li>`1:1` - square aspect ratio</li>   <li>`4:5` - short vertical/portrait aspect ratio</li>   <li>`4:3` - legacy TV aspect ratio</li> </ul>
     *
     * @return self
     */
    public function setAspectRatio($aspect_ratio)
    {
        $allowedValues = $this->getAspectRatioAllowableValues();
        if (!is_null($aspect_ratio) && !in_array($aspect_ratio, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'aspect_ratio', must be one of '%s'",
                    $aspect_ratio,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['aspect_ratio'] = $aspect_ratio;

        return $this;
    }

    /**
     * Gets size
     *
     * @return \Shotstack\Client\Model\Size|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param \Shotstack\Client\Model\Size|null $size size
     *
     * @return self
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets fps
     *
     * @return float|null
     */
    public function getFps()
    {
        return $this->container['fps'];
    }

    /**
     * Sets fps
     *
     * @param float|null $fps Override the default frames per second. Useful for when the source footage is recorded at 30fps, i.e. on  mobile devices. Lower frame rates can be used to add cinematic quality (24fps) or to create smaller file size/faster render times or animated gifs (12 or 15fps). Default is 25fps. <ul>   <li>`12` - 12fps</li>   <li>`15` - 15fps</li>   <li>`24` - 24fps</li>   <li>`23.976` - 23.976fps</li>   <li>`25` - 25fps</li>   <li>`29.97` - 29.97fps</li>   <li>`30` - 30fps</li> </ul>
     *
     * @return self
     */
    public function setFps($fps)
    {
        $allowedValues = $this->getFpsAllowableValues();
        if (!is_null($fps) && !in_array($fps, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fps', must be one of '%s'",
                    $fps,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fps'] = $fps;

        return $this;
    }

    /**
     * Gets scale_to
     *
     * @return string|null
     */
    public function getScaleTo()
    {
        return $this->container['scale_to'];
    }

    /**
     * Sets scale_to
     *
     * @param string|null $scale_to Override the resolution and scale the video or image to render at a different size. When using scaleTo the asset should be edited at the resolution dimensions, i.e. use font sizes that look best at HD, then use scaleTo to output the file at SD and the text will be scaled to the correct size. This is useful if you want to create multiple asset sizes. <ul>   <li>`preview` - 512px x 288px @ 15fps</li>   <li>`mobile` - 640px x 360px @ 25fps</li>   <li>`sd` - 1024px x 576px @25fps</li>   <li>`hd` - 1280px x 720px @25fps</li>   <li>`1080` - 1920px x 1080px @25fps</li> </ul>
     *
     * @return self
     */
    public function setScaleTo($scale_to)
    {
        $allowedValues = $this->getScaleToAllowableValues();
        if (!is_null($scale_to) && !in_array($scale_to, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'scale_to', must be one of '%s'",
                    $scale_to,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['scale_to'] = $scale_to;

        return $this;
    }

    /**
     * Gets quality
     *
     * @return string|null
     */
    public function getQuality()
    {
        return $this->container['quality'];
    }

    /**
     * Sets quality
     *
     * @param string|null $quality Adjust the output quality of the video, image or audio. Adjusting quality affects  render speed, download speeds and storage requirements due to file size. The default `medium` provides the most optimized choice for all three  factors. <ul>   <li>`low` - slightly reduced quality, smaller file size</li>   <li>`medium` - optimized quality, render speeds and file size</li>   <li>`high` - slightly increased quality, larger file size</li> </ul>
     *
     * @return self
     */
    public function setQuality($quality)
    {
        $allowedValues = $this->getQualityAllowableValues();
        if (!is_null($quality) && !in_array($quality, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'quality', must be one of '%s'",
                    $quality,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['quality'] = $quality;

        return $this;
    }

    /**
     * Gets repeat
     *
     * @return bool|null
     */
    public function getRepeat()
    {
        return $this->container['repeat'];
    }

    /**
     * Sets repeat
     *
     * @param bool|null $repeat Loop settings for gif files. Set to `true` to loop, `false` to play only once.
     *
     * @return self
     */
    public function setRepeat($repeat)
    {
        $this->container['repeat'] = $repeat;

        return $this;
    }

    /**
     * Gets range
     *
     * @return \Shotstack\Client\Model\Range|null
     */
    public function getRange()
    {
        return $this->container['range'];
    }

    /**
     * Sets range
     *
     * @param \Shotstack\Client\Model\Range|null $range range
     *
     * @return self
     */
    public function setRange($range)
    {
        $this->container['range'] = $range;

        return $this;
    }

    /**
     * Gets poster
     *
     * @return \Shotstack\Client\Model\Poster|null
     */
    public function getPoster()
    {
        return $this->container['poster'];
    }

    /**
     * Sets poster
     *
     * @param \Shotstack\Client\Model\Poster|null $poster poster
     *
     * @return self
     */
    public function setPoster($poster)
    {
        $this->container['poster'] = $poster;

        return $this;
    }

    /**
     * Gets thumbnail
     *
     * @return \Shotstack\Client\Model\Thumbnail|null
     */
    public function getThumbnail()
    {
        return $this->container['thumbnail'];
    }

    /**
     * Sets thumbnail
     *
     * @param \Shotstack\Client\Model\Thumbnail|null $thumbnail thumbnail
     *
     * @return self
     */
    public function setThumbnail($thumbnail)
    {
        $this->container['thumbnail'] = $thumbnail;

        return $this;
    }

    /**
     * Gets destinations
     *
     * @return AnyOfShotstackDestination[]|null
     */
    public function getDestinations()
    {
        return $this->container['destinations'];
    }

    /**
     * Sets destinations
     *
     * @param AnyOfShotstackDestination[]|null $destinations A destination is a location where output files can be sent to for serving or hosting. By default all rendered assets are automatically sent to the Shotstack hosting destination. [DestinationShotstack](/#tocs_shotstackdestination) is currently the only option with plans to add more in the future such as S3, YouTube, Vimeo and Mux. If you do not require hosting you can opt-out using the  `exclude` property.
     *
     * @return self
     */
    public function setDestinations($destinations)
    {
        $this->container['destinations'] = $destinations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


