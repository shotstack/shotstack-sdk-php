<?php
/**
 * Transition
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Shotstack\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shotstack
 *
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Shotstack\Client\Model;

use \ArrayAccess;
use \Shotstack\Client\ObjectSerializer;

/**
 * Transition Class Doc Comment
 *
 * @category Class
 * @description In and out transitions for a clip - i.e. fade in and fade out
 * @package  Shotstack\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class Transition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Transition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'in' => 'string',
        'out' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'in' => null,
        'out' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'in' => 'in',
        'out' => 'out'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'in' => 'setIn',
        'out' => 'setOut'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'in' => 'getIn',
        'out' => 'getOut'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const IN_FADE = 'fade';
    const IN_FADE_SLOW = 'fadeSlow';
    const IN_FADE_FAST = 'fadeFast';
    const IN_REVEAL = 'reveal';
    const IN_REVEAL_SLOW = 'revealSlow';
    const IN_REVEAL_FAST = 'revealFast';
    const IN_WIPE_LEFT = 'wipeLeft';
    const IN_WIPE_LEFT_SLOW = 'wipeLeftSlow';
    const IN_WIPE_LEFT_FAST = 'wipeLeftFast';
    const IN_WIPE_RIGHT = 'wipeRight';
    const IN_WIPE_RIGHT_SLOW = 'wipeRightSlow';
    const IN_WIPE_RIGHT_FAST = 'wipeRightFast';
    const IN_SLIDE_LEFT = 'slideLeft';
    const IN_SLIDE_LEFT_SLOW = 'slideLeftSlow';
    const IN_SLIDE_LEFT_FAST = 'slideLeftFast';
    const IN_SLIDE_RIGHT = 'slideRight';
    const IN_SLIDE_RIGHT_SLOW = 'slideRightSlow';
    const IN_SLIDE_RIGHT_FAST = 'slideRightFast';
    const IN_SLIDE_UP = 'slideUp';
    const IN_SLIDE_UP_SLOW = 'slideUpSlow';
    const IN_SLIDE_UP_FAST = 'slideUpFast';
    const IN_SLIDE_DOWN = 'slideDown';
    const IN_SLIDE_DOWN_SLOW = 'slideDownSlow';
    const IN_SLIDE_DOWN_FAST = 'slideDownFast';
    const IN_CAROUSEL_LEFT = 'carouselLeft';
    const IN_CAROUSEL_LEFT_SLOW = 'carouselLeftSlow';
    const IN_CAROUSEL_LEFT_FAST = 'carouselLeftFast';
    const IN_CAROUSEL_RIGHT = 'carouselRight';
    const IN_CAROUSEL_RIGHT_SLOW = 'carouselRightSlow';
    const IN_CAROUSEL_RIGHT_FAST = 'carouselRightFast';
    const IN_CAROUSEL_UP = 'carouselUp';
    const IN_CAROUSEL_UP_SLOW = 'carouselUpSlow';
    const IN_CAROUSEL_UP_FAST = 'carouselUpFast';
    const IN_CAROUSEL_DOWN = 'carouselDown';
    const IN_CAROUSEL_DOWN_SLOW = 'carouselDownSlow';
    const IN_CAROUSEL_DOWN_FAST = 'carouselDownFast';
    const IN_SHUFFLE_TOP_RIGHT = 'shuffleTopRight';
    const IN_SHUFFLE_TOP_RIGHT_SLOW = 'shuffleTopRightSlow';
    const IN_SHUFFLE_TOP_RIGHT_FAST = 'shuffleTopRightFast';
    const IN_SHUFFLE_RIGHT_TOP = 'shuffleRightTop';
    const IN_SHUFFLE_RIGHT_TOP_SLOW = 'shuffleRightTopSlow';
    const IN_SHUFFLE_RIGHT_TOP_FAST = 'shuffleRightTopFast';
    const IN_SHUFFLE_RIGHT_BOTTOM = 'shuffleRightBottom';
    const IN_SHUFFLE_RIGHT_BOTTOM_SLOW = 'shuffleRightBottomSlow';
    const IN_SHUFFLE_RIGHT_BOTTOM_FAST = 'shuffleRightBottomFast';
    const IN_SHUFFLE_BOTTOM_RIGHT = 'shuffleBottomRight';
    const IN_SHUFFLE_BOTTOM_RIGHT_SLOW = 'shuffleBottomRightSlow';
    const IN_SHUFFLE_BOTTOM_RIGHT_FAST = 'shuffleBottomRightFast';
    const IN_SHUFFLE_BOTTOM_LEFT = 'shuffleBottomLeft';
    const IN_SHUFFLE_BOTTOM_LEFT_SLOW = 'shuffleBottomLeftSlow';
    const IN_SHUFFLE_BOTTOM_LEFT_FAST = 'shuffleBottomLeftFast';
    const IN_SHUFFLE_LEFT_BOTTOM = 'shuffleLeftBottom';
    const IN_SHUFFLE_LEFT_BOTTOM_SLOW = 'shuffleLeftBottomSlow';
    const IN_SHUFFLE_LEFT_BOTTOM_FAST = 'shuffleLeftBottomFast';
    const IN_SHUFFLE_LEFT_TOP = 'shuffleLeftTop';
    const IN_SHUFFLE_LEFT_TOP_SLOW = 'shuffleLeftTopSlow';
    const IN_SHUFFLE_LEFT_TOP_FAST = 'shuffleLeftTopFast';
    const IN_SHUFFLE_TOP_LEFT = 'shuffleTopLeft';
    const IN_SHUFFLE_TOP_LEFT_SLOW = 'shuffleTopLeftSlow';
    const IN_SHUFFLE_TOP_LEFT_FAST = 'shuffleTopLeftFast';
    const IN_ZOOM = 'zoom';
    const OUT_FADE = 'fade';
    const OUT_FADE_SLOW = 'fadeSlow';
    const OUT_FADE_FAST = 'fadeFast';
    const OUT_REVEAL = 'reveal';
    const OUT_REVEAL_SLOW = 'revealSlow';
    const OUT_REVEAL_FAST = 'revealFast';
    const OUT_WIPE_LEFT = 'wipeLeft';
    const OUT_WIPE_LEFT_SLOW = 'wipeLeftSlow';
    const OUT_WIPE_LEFT_FAST = 'wipeLeftFast';
    const OUT_WIPE_RIGHT = 'wipeRight';
    const OUT_WIPE_RIGHT_SLOW = 'wipeRightSlow';
    const OUT_WIPE_RIGHT_FAST = 'wipeRightFast';
    const OUT_SLIDE_LEFT = 'slideLeft';
    const OUT_SLIDE_LEFT_SLOW = 'slideLeftSlow';
    const OUT_SLIDE_LEFT_FAST = 'slideLeftFast';
    const OUT_SLIDE_RIGHT = 'slideRight';
    const OUT_SLIDE_RIGHT_SLOW = 'slideRightSlow';
    const OUT_SLIDE_RIGHT_FAST = 'slideRightFast';
    const OUT_SLIDE_UP = 'slideUp';
    const OUT_SLIDE_UP_SLOW = 'slideUpSlow';
    const OUT_SLIDE_UP_FAST = 'slideUpFast';
    const OUT_SLIDE_DOWN = 'slideDown';
    const OUT_SLIDE_DOWN_SLOW = 'slideDownSlow';
    const OUT_SLIDE_DOWN_FAST = 'slideDownFast';
    const OUT_CAROUSEL_LEFT = 'carouselLeft';
    const OUT_CAROUSEL_LEFT_SLOW = 'carouselLeftSlow';
    const OUT_CAROUSEL_LEFT_FAST = 'carouselLeftFast';
    const OUT_CAROUSEL_RIGHT = 'carouselRight';
    const OUT_CAROUSEL_RIGHT_SLOW = 'carouselRightSlow';
    const OUT_CAROUSEL_RIGHT_FAST = 'carouselRightFast';
    const OUT_CAROUSEL_UP = 'carouselUp';
    const OUT_CAROUSEL_UP_SLOW = 'carouselUpSlow';
    const OUT_CAROUSEL_UP_FAST = 'carouselUpFast';
    const OUT_CAROUSEL_DOWN = 'carouselDown';
    const OUT_CAROUSEL_DOWN_SLOW = 'carouselDownSlow';
    const OUT_CAROUSEL_DOWN_FAST = 'carouselDownFast';
    const OUT_SHUFFLE_TOP_RIGHT = 'shuffleTopRight';
    const OUT_SHUFFLE_TOP_RIGHT_SLOW = 'shuffleTopRightSlow';
    const OUT_SHUFFLE_TOP_RIGHT_FAST = 'shuffleTopRightFast';
    const OUT_SHUFFLE_RIGHT_TOP = 'shuffleRightTop';
    const OUT_SHUFFLE_RIGHT_TOP_SLOW = 'shuffleRightTopSlow';
    const OUT_SHUFFLE_RIGHT_TOP_FAST = 'shuffleRightTopFast';
    const OUT_SHUFFLE_RIGHT_BOTTOM = 'shuffleRightBottom';
    const OUT_SHUFFLE_RIGHT_BOTTOM_SLOW = 'shuffleRightBottomSlow';
    const OUT_SHUFFLE_RIGHT_BOTTOM_FAST = 'shuffleRightBottomFast';
    const OUT_SHUFFLE_BOTTOM_RIGHT = 'shuffleBottomRight';
    const OUT_SHUFFLE_BOTTOM_RIGHT_SLOW = 'shuffleBottomRightSlow';
    const OUT_SHUFFLE_BOTTOM_RIGHT_FAST = 'shuffleBottomRightFast';
    const OUT_SHUFFLE_BOTTOM_LEFT = 'shuffleBottomLeft';
    const OUT_SHUFFLE_BOTTOM_LEFT_SLOW = 'shuffleBottomLeftSlow';
    const OUT_SHUFFLE_BOTTOM_LEFT_FAST = 'shuffleBottomLeftFast';
    const OUT_SHUFFLE_LEFT_BOTTOM = 'shuffleLeftBottom';
    const OUT_SHUFFLE_LEFT_BOTTOM_SLOW = 'shuffleLeftBottomSlow';
    const OUT_SHUFFLE_LEFT_BOTTOM_FAST = 'shuffleLeftBottomFast';
    const OUT_SHUFFLE_LEFT_TOP = 'shuffleLeftTop';
    const OUT_SHUFFLE_LEFT_TOP_SLOW = 'shuffleLeftTopSlow';
    const OUT_SHUFFLE_LEFT_TOP_FAST = 'shuffleLeftTopFast';
    const OUT_SHUFFLE_TOP_LEFT = 'shuffleTopLeft';
    const OUT_SHUFFLE_TOP_LEFT_SLOW = 'shuffleTopLeftSlow';
    const OUT_SHUFFLE_TOP_LEFT_FAST = 'shuffleTopLeftFast';
    const OUT_ZOOM = 'zoom';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInAllowableValues()
    {
        return [
            self::IN_FADE,
            self::IN_FADE_SLOW,
            self::IN_FADE_FAST,
            self::IN_REVEAL,
            self::IN_REVEAL_SLOW,
            self::IN_REVEAL_FAST,
            self::IN_WIPE_LEFT,
            self::IN_WIPE_LEFT_SLOW,
            self::IN_WIPE_LEFT_FAST,
            self::IN_WIPE_RIGHT,
            self::IN_WIPE_RIGHT_SLOW,
            self::IN_WIPE_RIGHT_FAST,
            self::IN_SLIDE_LEFT,
            self::IN_SLIDE_LEFT_SLOW,
            self::IN_SLIDE_LEFT_FAST,
            self::IN_SLIDE_RIGHT,
            self::IN_SLIDE_RIGHT_SLOW,
            self::IN_SLIDE_RIGHT_FAST,
            self::IN_SLIDE_UP,
            self::IN_SLIDE_UP_SLOW,
            self::IN_SLIDE_UP_FAST,
            self::IN_SLIDE_DOWN,
            self::IN_SLIDE_DOWN_SLOW,
            self::IN_SLIDE_DOWN_FAST,
            self::IN_CAROUSEL_LEFT,
            self::IN_CAROUSEL_LEFT_SLOW,
            self::IN_CAROUSEL_LEFT_FAST,
            self::IN_CAROUSEL_RIGHT,
            self::IN_CAROUSEL_RIGHT_SLOW,
            self::IN_CAROUSEL_RIGHT_FAST,
            self::IN_CAROUSEL_UP,
            self::IN_CAROUSEL_UP_SLOW,
            self::IN_CAROUSEL_UP_FAST,
            self::IN_CAROUSEL_DOWN,
            self::IN_CAROUSEL_DOWN_SLOW,
            self::IN_CAROUSEL_DOWN_FAST,
            self::IN_SHUFFLE_TOP_RIGHT,
            self::IN_SHUFFLE_TOP_RIGHT_SLOW,
            self::IN_SHUFFLE_TOP_RIGHT_FAST,
            self::IN_SHUFFLE_RIGHT_TOP,
            self::IN_SHUFFLE_RIGHT_TOP_SLOW,
            self::IN_SHUFFLE_RIGHT_TOP_FAST,
            self::IN_SHUFFLE_RIGHT_BOTTOM,
            self::IN_SHUFFLE_RIGHT_BOTTOM_SLOW,
            self::IN_SHUFFLE_RIGHT_BOTTOM_FAST,
            self::IN_SHUFFLE_BOTTOM_RIGHT,
            self::IN_SHUFFLE_BOTTOM_RIGHT_SLOW,
            self::IN_SHUFFLE_BOTTOM_RIGHT_FAST,
            self::IN_SHUFFLE_BOTTOM_LEFT,
            self::IN_SHUFFLE_BOTTOM_LEFT_SLOW,
            self::IN_SHUFFLE_BOTTOM_LEFT_FAST,
            self::IN_SHUFFLE_LEFT_BOTTOM,
            self::IN_SHUFFLE_LEFT_BOTTOM_SLOW,
            self::IN_SHUFFLE_LEFT_BOTTOM_FAST,
            self::IN_SHUFFLE_LEFT_TOP,
            self::IN_SHUFFLE_LEFT_TOP_SLOW,
            self::IN_SHUFFLE_LEFT_TOP_FAST,
            self::IN_SHUFFLE_TOP_LEFT,
            self::IN_SHUFFLE_TOP_LEFT_SLOW,
            self::IN_SHUFFLE_TOP_LEFT_FAST,
            self::IN_ZOOM,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOutAllowableValues()
    {
        return [
            self::OUT_FADE,
            self::OUT_FADE_SLOW,
            self::OUT_FADE_FAST,
            self::OUT_REVEAL,
            self::OUT_REVEAL_SLOW,
            self::OUT_REVEAL_FAST,
            self::OUT_WIPE_LEFT,
            self::OUT_WIPE_LEFT_SLOW,
            self::OUT_WIPE_LEFT_FAST,
            self::OUT_WIPE_RIGHT,
            self::OUT_WIPE_RIGHT_SLOW,
            self::OUT_WIPE_RIGHT_FAST,
            self::OUT_SLIDE_LEFT,
            self::OUT_SLIDE_LEFT_SLOW,
            self::OUT_SLIDE_LEFT_FAST,
            self::OUT_SLIDE_RIGHT,
            self::OUT_SLIDE_RIGHT_SLOW,
            self::OUT_SLIDE_RIGHT_FAST,
            self::OUT_SLIDE_UP,
            self::OUT_SLIDE_UP_SLOW,
            self::OUT_SLIDE_UP_FAST,
            self::OUT_SLIDE_DOWN,
            self::OUT_SLIDE_DOWN_SLOW,
            self::OUT_SLIDE_DOWN_FAST,
            self::OUT_CAROUSEL_LEFT,
            self::OUT_CAROUSEL_LEFT_SLOW,
            self::OUT_CAROUSEL_LEFT_FAST,
            self::OUT_CAROUSEL_RIGHT,
            self::OUT_CAROUSEL_RIGHT_SLOW,
            self::OUT_CAROUSEL_RIGHT_FAST,
            self::OUT_CAROUSEL_UP,
            self::OUT_CAROUSEL_UP_SLOW,
            self::OUT_CAROUSEL_UP_FAST,
            self::OUT_CAROUSEL_DOWN,
            self::OUT_CAROUSEL_DOWN_SLOW,
            self::OUT_CAROUSEL_DOWN_FAST,
            self::OUT_SHUFFLE_TOP_RIGHT,
            self::OUT_SHUFFLE_TOP_RIGHT_SLOW,
            self::OUT_SHUFFLE_TOP_RIGHT_FAST,
            self::OUT_SHUFFLE_RIGHT_TOP,
            self::OUT_SHUFFLE_RIGHT_TOP_SLOW,
            self::OUT_SHUFFLE_RIGHT_TOP_FAST,
            self::OUT_SHUFFLE_RIGHT_BOTTOM,
            self::OUT_SHUFFLE_RIGHT_BOTTOM_SLOW,
            self::OUT_SHUFFLE_RIGHT_BOTTOM_FAST,
            self::OUT_SHUFFLE_BOTTOM_RIGHT,
            self::OUT_SHUFFLE_BOTTOM_RIGHT_SLOW,
            self::OUT_SHUFFLE_BOTTOM_RIGHT_FAST,
            self::OUT_SHUFFLE_BOTTOM_LEFT,
            self::OUT_SHUFFLE_BOTTOM_LEFT_SLOW,
            self::OUT_SHUFFLE_BOTTOM_LEFT_FAST,
            self::OUT_SHUFFLE_LEFT_BOTTOM,
            self::OUT_SHUFFLE_LEFT_BOTTOM_SLOW,
            self::OUT_SHUFFLE_LEFT_BOTTOM_FAST,
            self::OUT_SHUFFLE_LEFT_TOP,
            self::OUT_SHUFFLE_LEFT_TOP_SLOW,
            self::OUT_SHUFFLE_LEFT_TOP_FAST,
            self::OUT_SHUFFLE_TOP_LEFT,
            self::OUT_SHUFFLE_TOP_LEFT_SLOW,
            self::OUT_SHUFFLE_TOP_LEFT_FAST,
            self::OUT_ZOOM,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['in'] = $data['in'] ?? null;
        $this->container['out'] = $data['out'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getInAllowableValues();
        if (!is_null($this->container['in']) && !in_array($this->container['in'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'in', must be one of '%s'",
                $this->container['in'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOutAllowableValues();
        if (!is_null($this->container['out']) && !in_array($this->container['out'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'out', must be one of '%s'",
                $this->container['out'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets in
     *
     * @return string|null
     */
    public function getIn()
    {
        return $this->container['in'];
    }

    /**
     * Sets in
     *
     * @param string|null $in The transition in. Available transitions are:   <ul>     <li>`fade` - fade in</li>     <li>`reveal` - reveal from left to right</li>     <li>`wipeLeft` - fade across screen to the left</li>     <li>`wipeRight` - fade across screen to the right</li>     <li>`slideLeft` - move slightly left and fade in</li>     <li>`slideRight` - move slightly right and fade in</li>     <li>`slideUp` - move slightly up and fade in</li>     <li>`slideDown` - move slightly down and fade in</li>     <li>`carouselLeft` - slide in from right to left</li>     <li>`carouselRight` - slide in from left to right</li>     <li>`carouselUp` - slide in from bottom to top</li>     <li>`carouselDown` - slide in from top to bottom</li>     <li>`shuffleTopRight` - rotate in from top right</li>     <li>`shuffleRightTop` - rotate in from right top</li>     <li>`shuffleRightBottom` - rotate in from right bottom</li>     <li>`shuffleBottomRight` - rotate in from bottom right</li>     <li>`shuffleBottomLeft` - rotate in from bottom left</li>     <li>`shuffleLeftBottom` - rotate in from left bottom</li>     <li>`shuffleLeftTop` - rotate in from left top</li>     <li>`shuffleTopLeft` - rotate in from top left</li>     <li>`zoom` - fast zoom in</li>   </ul> The transition speed can also be controlled by appending `Fast` or `Slow` to the transition, e.g. `fadeFast` or `CarouselLeftSlow`.
     *
     * @return self
     */
    public function setIn($in)
    {
        $allowedValues = $this->getInAllowableValues();
        if (!is_null($in) && !in_array($in, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'in', must be one of '%s'",
                    $in,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['in'] = $in;

        return $this;
    }

    /**
     * Gets out
     *
     * @return string|null
     */
    public function getOut()
    {
        return $this->container['out'];
    }

    /**
     * Sets out
     *
     * @param string|null $out The transition out. Available transitions are:   <ul>     <li>`fade` - fade out</li>     <li>`reveal` - reveal from right to left</li>     <li>`wipeLeft` - fade across screen to the left</li>     <li>`wipeRight` - fade across screen to the right</li>     <li>`slideLeft` - move slightly left and fade out</li>     <li>`slideRight` - move slightly right and fade out</li>     <li>`slideUp` - move slightly up and fade out</li>     <li>`slideDown` - move slightly down and fade out</li>     <li>`carouselLeft` - slide out from right to left</li>     <li>`carouselRight` - slide out from left to right</li>     <li>`carouselUp` - slide out from bottom to top</li>     <li>`carouselDown` - slide out from top  to bottom</li>     <li>`shuffleTopRight` - rotate out from top right</li>     <li>`shuffleRightTop` - rotate out from right top</li>     <li>`shuffleRightBottom` - rotate out from right bottom</li>     <li>`shuffleBottomRight` - rotate out from bottom right</li>     <li>`shuffleBottomLeft` - rotate out from bottom left</li>     <li>`shuffleLeftBottom` - rotate out from left bottom</li>     <li>`shuffleLeftTop` - rotate out from left top</li>     <li>`shuffleTopLeft` - rotate out from top left</li>     <li>`zoom` - fast zoom out</li>   </ul> The transition speed can also be controlled by appending `Fast` or `Slow` to the transition, e.g. `fadeFast` or `CarouselLeftSlow`.
     *
     * @return self
     */
    public function setOut($out)
    {
        $allowedValues = $this->getOutAllowableValues();
        if (!is_null($out) && !in_array($out, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'out', must be one of '%s'",
                    $out,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['out'] = $out;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


